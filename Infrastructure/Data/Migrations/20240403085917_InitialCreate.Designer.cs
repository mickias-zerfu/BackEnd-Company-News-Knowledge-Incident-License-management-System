// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20240403085917_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Core.Entities.FileDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("FileData");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("FileName");

                    b.Property<int>("FileType")
                        .HasColumnType("int")
                        .HasColumnName("FileType");

                    b.Property<string>("FileUrl")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("FileDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Incident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Created_at")
                        .HasColumnType("longtext");

                    b.Property<string>("IncidentDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IncidentTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("QuickReviews")
                        .HasColumnType("longtext");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<string>("SolutionToIncident")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusAction")
                        .HasColumnType("longtext");

                    b.Property<string>("Updated_at")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("Core.Entities.KnowledgeBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Created_at")
                        .HasColumnType("longtext");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Solution")
                        .HasColumnType("longtext");

                    b.Property<string>("Updated_at")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("KnowledgeBases");
                });

            modelBuilder.Entity("Core.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Created_at")
                        .HasColumnType("longtext");

                    b.Property<string>("Image_url")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Updated_at")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Core.Entities.SharedResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Created_at")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("longblob");

                    b.Property<string>("FileDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FileTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Updated_at")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SharedResources");
                });

            modelBuilder.Entity("Core.Entities.licenseEntity.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IssuedTo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LicenseType")
                        .HasColumnType("int");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SoftwareProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareProductId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("Core.Entities.licenseEntity.LicenseManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("LicenseManagers");
                });

            modelBuilder.Entity("Core.Entities.licenseEntity.LicenseManagerLicense", b =>
                {
                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.Property<int>("LicenseManagerId")
                        .HasColumnType("int");

                    b.HasKey("LicenseId", "LicenseManagerId");

                    b.HasIndex("LicenseManagerId");

                    b.ToTable("LicenseManagerLicenses");
                });

            modelBuilder.Entity("Core.Entities.licenseEntity.SoftwareProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SoftwareProducts");
                });

            modelBuilder.Entity("Core.Entities.Comment", b =>
                {
                    b.HasOne("Core.Entities.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("Core.Entities.licenseEntity.License", b =>
                {
                    b.HasOne("Core.Entities.licenseEntity.SoftwareProduct", null)
                        .WithMany()
                        .HasForeignKey("SoftwareProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.licenseEntity.LicenseManagerLicense", b =>
                {
                    b.HasOne("Core.Entities.licenseEntity.License", "License")
                        .WithMany("LicenseManagerLicenses")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.licenseEntity.LicenseManager", "LicenseManager")
                        .WithMany("LicenseManagerLicenses")
                        .HasForeignKey("LicenseManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("License");

                    b.Navigation("LicenseManager");
                });

            modelBuilder.Entity("Core.Entities.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Core.Entities.licenseEntity.License", b =>
                {
                    b.Navigation("LicenseManagerLicenses");
                });

            modelBuilder.Entity("Core.Entities.licenseEntity.LicenseManager", b =>
                {
                    b.Navigation("LicenseManagerLicenses");
                });
#pragma warning restore 612, 618
        }
    }
}
